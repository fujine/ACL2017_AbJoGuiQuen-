@startuml
	Class Hero extends Entites {

		public Hero()
		public deplacer(int x, int y) : void
		public subirDegat(int nbDegats) : void
		public getPosX() : int
		public getPosY() : int
        public setPosX(int posX) : void
        public setPosY(int posY) : void
	}

	Abstract Entites {
	    private Point coord
	    private int degat
	    private int vie
	    private int vitesse
	    public Rectangle getSurfaceCollision()
	    public int getDegat()
	    public void setDegat(int degat)
	    public abstract void attaquer()
	}


	Class Chevalier {
	    public void deplacer()
	}

	Class Fantome {
    	public void deplacer()
    }

    interface Effet {
        public void appliquer(Entites e)
        public boolean finEffet()
    }

    class PoisonEffet {
        private int duree
        private int degat
        public void appliquer(Entites e)
        public boolean finEffet()
    }

    class RalentiEffet {
        private int duree
        public void appliquer(Entites e)
        public boolean finEffet()
    }

	Interface Monstre extends Entites{
	    public void deplacer()
	    public void deplRandom()
	    public void deplAgress()
	}

	Class Plateau {
        private plateau : boolean[][]
        private ArrayList<Monstre> monstres
        public static HAUTEUR : int
        public static LARGEUR : int

        public Plateau()
        public ArrayList<Monstre> getMonstre()
        estLibre(int posX, int posY) : boolean
        appliquerEffetCase(int posX, int posY) : void
        affichageText() : void
        public boolean horsPlateau(Point coord)

	}

	Class CaseFactory <<Factory>>{
	    public static creerCase(String type) : ICase
	    public static creerCase(String type, Object arguments) : ICase
	}

	Class ObjetFactory <<Factory>>{
	    public static creerObjet() : Objet
	}

	Interface ICase {
	    public estTraversable() : boolean
	    public appliquerEffet() : void
	}

	Interface Objet <<Strategie>>{
	    public appliquerEffet() : void
	}

	Class CaseMur {
	    public estTraversable() : boolean
	    public appliquerEffet() : void
	}

	Class ObjetTresor {
	    public appliquerEffet() : void
	}

	Class ObjetTp {
	    public appliquerEffet() : void
	}

	Class ObjetVie {
    	    public appliquerEffet() : void
    }

	Class Case {
	    public objet : Objet
	    public estTraversable() : boolean
	    public appliquerEffet() : void
	}

    Class DrawingPanel {
        private static final long serialVersionU
        private painter : GamePainter
        private nextImage : BufferedImage
        private currentImage : BufferedImage
        private width : int
        private height : int
        public DrawingPanel(GamePainter painter)
        public drawGame() : void
        public paint(Graphics g) : void
    }

    Interface Game {
        public evolve(Cmd userCmd) : void
        public isFinished() : boolean
    }

    Interface GameController extends KeyListener {
        public getCommand() : Cmd
    }

    Class KeyListener

    Class GameEngineGraphical {
    	private Game game
    	private GamePainter gamePainter
    	private GameController gameController
    	private GraphicalInterface gui
    	public GameEngineGraphical(Game game, GamePainter gamePainter, GameController gameController)
    	public void run() throws InterruptedException

    }

    interface GamePainter {
    	public abstract void draw(BufferedImage image);
    	public abstract int getWidth();
    	public abstract int getHeight();
    }

    class GraphicalInterface  {
    	private DrawingPanel panel;
    	private JFrame f = new JFrame();
    	public GraphicalInterface(GamePainter gamePainter, GameController gameController)
    	public void paint(
    	public void close()
    }

	Class ObjetPiege {
	    public appliquerEffet() : void
	}

	Enum Cmd

	class Controller implements GameController{
    	private Cmd commandeEnCours
    	public Controller()
    	public Cmd getCommand()
    	public void keyPressed(KeyEvent e)
    	public void keyReleased(KeyEvent e)
    	public void keyTyped(KeyEvent e)

    }

    class Painter implements GamePainter {
    	protected static final int WIDTH = 1000
    	protected static final int HEIGHT = 1000
    	protected static final int ECHELLE
    	private Jeu jeu
    	public Painter(Jeu jeu)
    	public void draw(BufferedImage im)
    	public void drawPlateau(BufferedImage im)
    	public int getWidth()
    	public int getHeight()
    }

    class Jeu <<Singleton>> implements Game {

        private static Jeu instance
        private boolean fini
        private Hero hero
        private ArrayList<Plateau> donjon
        private int plateauCourant
        private Jeu() {}
        public static Jeu getInstance()
        public void evolve(Cmd cmd)
        public boolean isFini()
        public void setFini(boolean fini)
        public Plateau getPlateau(int index)
        public ArrayList<Plateau> getDonjon()
        public boolean isFinished()
        public Hero getHero()
        public void estMort()
        public void appliquerDegats(int nbDegats)
        public Entites collisionEntites(Entites e, Point coord)
        public boolean verifLibre(Point coord)
    }

    class LectureFichier {
         public static Plateau lireFichier(String txt)
    }

    class MonstreFactory {
        public static Monstre creerMonstre(String type, Point coord)
    }

    class BouleDeFeu {
        public void deplacer()
        public void deplRandom()
        public void deplAgress()
    }

    class Poule {
        public void deplacer()
        public void deplRandom()
        public void deplAgress()
    }

    class Camera {
        private int largeurEcran
        private int portee
        private int[] limX
        private int[] limY
        public Camera()
        public void setLimites(Hero hero)
        public int getLimXInf()
        public int getLimXSup()
        public int getLimYInf()
        public int getLimYSup()
        public boolean dansCadre(Point coord)
    }

    GamePainter -- "1" DrawingPanel
    GraphicalInterface -- "1" DrawingPanel
    JFrame "1" -- GraphicalInterface
    GameEngineGraphical -- "1" Game
    GameEngineGraphical -- "1" GamePainter
    GameEngineGraphical -- "1" GameController
    GameEngineGraphical -- "1" GraphicalInterface
    Objet <.. ObjetPiege
    ICase <.. Case
    ICase <.. CaseMur
    Objet <.. ObjetTresor
    Objet <.. ObjetTp
    Objet <.. ObjetVie
    Case -- "1" Objet
    Plateau -- "*" ICase
    Plateau "1" -right- "*" Entites
	Jeu -down- "1-*" Entites
	Jeu -down- "*" Plateau
	CaseFactory -[hidden]- ObjetFactory
	JPanel <|-left- DrawingPanel
	BufferedImage "2" -right- DrawingPanel
	Plateau -[hidden]left- MonstreFactory
    Monstre <.. Chevalier
    Monstre <.. Fantome
    Monstre <.. BouleDeFeu
    Monstre <.. Poule
    MonstreFactory -[hidden]- CaseFactory

    Hero -[hidden]right- Monstre
    Effet <.. PoisonEffet
    Effet <.. RalentiEffet
    Entites -right- "*" Effet
    Painter -- "1" Camera

@enduml
